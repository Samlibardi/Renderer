#version 450
#extension GL_KHR_vulkan_glsl: enable

layout (local_size_x = 16, local_size_y = 16) in;

layout(push_constant) uniform pushConstants {
    float exposure;
    float gamma;
};

layout(set=0, binding=0) uniform sampler2D colorSampler;
layout(set=0, binding=1) uniform sampler2D bloomSampler;
layout(set=0, binding=2, r11f_g11f_b10f) uniform writeonly image2D outputColorImage;
layout(set=0, binding=3, r32f) uniform writeonly image2D outputLogLuminanceImage;

// filmic tonemap source: https://www.gdcvault.com/play/1012351/Uncharted-2-HDR

const float shoulderStr = 0.22f;
const float linStr = 0.30f;
const float linAngle = 0.10f;
const float toeStr = 0.20f;
const float toeNum = 0.01f;
const float toeDenom = 0.30f;
const float linWhitePoint = 11.2f;

float tone(float x) {
  return ((x*(shoulderStr*x + linAngle*linStr)+toeStr*toeNum)/(x*(shoulderStr*x+linStr)+toeStr*toeDenom)) - toeNum/toeDenom;
}

vec3 tone(vec3 v) {
    return vec3(tone(v.x), tone(v.y), tone(v.z));
}

void main() {
    const ivec2 samplePos = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy + gl_LocalInvocationID.xy);

    if(samplePos.x > imageSize(outputColorImage).x || samplePos.y > imageSize(outputColorImage).y)
        return;

    vec3 color = texture(colorSampler, samplePos).rgb;
    vec3 bloomColor = texture(bloomSampler, samplePos).rgb;

    imageStore(outputLogLuminanceImage, samplePos, vec4(log2(2 * color.r + 3 * color.g + color.b) - log2(6), 0.0f, 0.0f, 1.0f));

    color = mix(color, bloomColor, 0.04f);

    color = tone(color)/tone(linWhitePoint);

    color = vec3(1.0) - exp(-color * pow(2.0f, exposure));
    color = pow(color, vec3(1.0 / gamma));

    imageStore(outputColorImage, samplePos, vec4(color, 1.0f));
}